generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String           @id @default(cuid())
    name           String?
    email          String?          @unique
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    posts          Post[]
    plan           Plans            @default(FREE)
    screenshots    Screenshot[]
    userMetrics    userMetrics[]
    userAccessKeys userAccessKeys[]
}

model Screenshot {
    id              String   @id @default(cuid())
    imageUrl        String
    userProvidedUrl String
    User            User     @relation(fields: [userId], references: [id])
    userId          String
    createdAt       DateTime @default(now())
    status          Status   @default(PENDING)
    statusMessage   String?
}

model userMetrics {
    id              String   @id @default(cuid())
    userId          String
    screenshotLimit Int      @default(100)
    screenshotTaken Int      @default(0)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    month           Int
    year            Int
    User            User     @relation(fields: [userId], references: [id])

    @@unique([userId, month, year])
}

model userAccessKeys {
    id        String    @id @default(cuid())
    key       String
    keyStatus keyStatus @default(ACTIVE)
    userId    String
    User      User      @relation(fields: [userId], references: [id])
}

enum keyStatus {
    ACTIVE
    DEACTIVATED
}

enum Status {
    PENDING
    SUCCESS
    ERROR
    TIMEOUT
}

enum Plans {
    FREE
    PRO

    @@map("PLANS")
}

// success, error,timeout
model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
